name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('ci-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          # Install dagshub first to avoid setup.py issues
          pip install dagshub>=0.2.0
          # Install CI requirements
          pip install -r ci-requirements.txt
          # Install the package in development mode
          pip install -e .

      # Check if GCP credentials are available
      - name: Check GCP credentials
        id: check-gcp-creds
        run: |
          if [ -n "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "gcp_creds_available=true" >> $GITHUB_OUTPUT
            echo "GCP credentials are available"
          else
            echo "gcp_creds_available=false" >> $GITHUB_OUTPUT
            echo "GCP credentials are not available. Skipping GCP-related steps."
          fi

      # Set up GCP authentication (only if credentials are available)
      - name: Set up GCP credentials
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI (only if credentials are available)
      - name: Set up Cloud SDK
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configure Docker to use gcloud as a credential helper (only if credentials are available)
      - name: Configure Docker for GCP
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          gcloud auth configure-docker gcr.io,us-docker.pkg.dev --quiet

      # Set up GCP credentials for DVC (only if credentials are available)
      - name: Set up GCP credentials for DVC
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV

      - name: Run pipeline
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
          GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
        run: |
          # Create data directories if they don't exist
          mkdir -p data/raw data/interim data/processed

          # Fix the Git-tracked data directory issue
          echo "Fixing Git-tracked data directory issue..."
          git rm -r --cached data/raw || true
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "stop tracking data/raw" || echo "No changes to commit"

          # Check if we can run DVC with GCP
          if [ "${{ steps.check-gcp-creds.outputs.gcp_creds_available }}" == "true" ]; then
            echo "Running DVC pipeline with GCP integration"
            dvc repro || echo "DVC pipeline failed, but continuing with tests"
          else
            echo "Running DVC pipeline without GCP integration"
            # Use local remote instead of GCP
            dvc remote default mylocal
            dvc repro || echo "DVC pipeline failed, but continuing with tests"
          fi

      - name: Run model tests
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: |
          python -m unittest tests/test_model.py

      # Check if CAPSTONE_TEST is available
      - name: Check CAPSTONE_TEST availability
        id: check-capstone-test
        run: |
          if [ -n "${{ secrets.CAPSTONE_TEST }}" ]; then
            echo "capstone_test_available=true" >> $GITHUB_OUTPUT
            echo "CAPSTONE_TEST is available"
          else
            echo "capstone_test_available=false" >> $GITHUB_OUTPUT
            echo "CAPSTONE_TEST is not available. MLflow tracking will be disabled."
          fi

      - name: Promote model to production
        if: success() && steps.check-capstone-test.outputs.capstone_test_available == 'true'
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python scripts/promote_model.py

      - name: Skip model promotion
        if: success() && steps.check-capstone-test.outputs.capstone_test_available != 'true'
        run: echo "Skipping model promotion because CAPSTONE_TEST is not available"

      - name: Run Flask app tests
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
        run: python -m unittest tests/test_flask_app.py

      # Build and push Docker image to Google Container Registry (only if credentials are available)
      - name: Build Docker image
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCR_REPOSITORY }}:latest .

      - name: Push Docker image to GCR
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCR_REPOSITORY }}:latest

      # Set up kubectl for GKE (only if credentials are available)
      - name: Set up kubectl
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Configure kubectl for GKE (only if credentials are available)
      - name: Configure kubectl for GKE
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      # Create Kubernetes Secret (only if credentials are available)
      - name: Create Kubernetes Secret
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          kubectl create secret generic capstone-secret \
            --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} \
            --from-literal=GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json \
            --dry-run=client -o yaml | kubectl apply -f -

      # Create GCP service account key secret (only if credentials are available)
      - name: Create GCP SA Key Secret
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          kubectl create secret generic gcp-sa-key \
            --from-file=key.json=gcp-key.json \
            --dry-run=client -o yaml | kubectl apply -f -

      # Deploy to GKE (only if credentials are available)
      - name: Deploy to GKE
        if: steps.check-gcp-creds.outputs.gcp_creds_available == 'true'
        run: |
          # Update image in deployment.yaml if needed
          sed -i 's|IMAGE_TO_REPLACE|gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCR_REPOSITORY }}:latest|g' deployment.yaml
          kubectl apply -f deployment.yaml